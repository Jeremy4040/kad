// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: server.proto

package serverpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Server_NewClusterRegistration_FullMethodName    = "/serverpb.Server/NewClusterRegistration"
	Server_UpdateClusterRegistration_FullMethodName = "/serverpb.Server/UpdateClusterRegistration"
	Server_DeleteClusterRegistration_FullMethodName = "/serverpb.Server/DeleteClusterRegistration"
	Server_GetClusters_FullMethodName               = "/serverpb.Server/GetClusters"
	Server_GetClusterApps_FullMethodName            = "/serverpb.Server/GetClusterApps"
	Server_GetClusterAppConfig_FullMethodName       = "/serverpb.Server/GetClusterAppConfig"
	Server_AddAppStoreApp_FullMethodName            = "/serverpb.Server/AddAppStoreApp"
	Server_GetAppStoreAppConfig_FullMethodName      = "/serverpb.Server/GetAppStoreAppConfig"
	Server_GetAppStoreAppList_FullMethodName        = "/serverpb.Server/GetAppStoreAppList"
	Server_UpdateAppStoreApp_FullMethodName         = "/serverpb.Server/UpdateAppStoreApp"
	Server_DeleteAppStoreApp_FullMethodName         = "/serverpb.Server/DeleteAppStoreApp"
)

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	NewClusterRegistration(ctx context.Context, in *NewClusterRegistrationRequest, opts ...grpc.CallOption) (*NewClusterRegistrationResponse, error)
	UpdateClusterRegistration(ctx context.Context, in *UpdateClusterRegistrationRequest, opts ...grpc.CallOption) (*UpdateClusterRegistrationResponse, error)
	DeleteClusterRegistration(ctx context.Context, in *DeleteClusterRegistrationRequest, opts ...grpc.CallOption) (*DeleteClusterRegistrationResponse, error)
	GetClusters(ctx context.Context, in *GetClustersRequest, opts ...grpc.CallOption) (*GetClustersResponse, error)
	GetClusterApps(ctx context.Context, in *GetClusterAppsRequest, opts ...grpc.CallOption) (*GetClusterAppsResponse, error)
	GetClusterAppConfig(ctx context.Context, in *GetClusterAppConfigRequest, opts ...grpc.CallOption) (*GetClusterAppConfigResponse, error)
	AddAppStoreApp(ctx context.Context, in *AddAppStoreAppRequest, opts ...grpc.CallOption) (*AddAppStoreAppResponse, error)
	GetAppStoreAppConfig(ctx context.Context, in *GetAppStoreAppConfigRequest, opts ...grpc.CallOption) (*GetAppStoreAppConfigResponse, error)
	GetAppStoreAppList(ctx context.Context, in *GetAppStoreAppListRequest, opts ...grpc.CallOption) (*GetAppStoreAppListResponse, error)
	UpdateAppStoreApp(ctx context.Context, in *UpdateAppStoreAppRequest, opts ...grpc.CallOption) (*UpdateAppStoreAppRsponse, error)
	DeleteAppStoreApp(ctx context.Context, in *DeleteAppStoreAppRequest, opts ...grpc.CallOption) (*DeleteAppStoreAppResponse, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) NewClusterRegistration(ctx context.Context, in *NewClusterRegistrationRequest, opts ...grpc.CallOption) (*NewClusterRegistrationResponse, error) {
	out := new(NewClusterRegistrationResponse)
	err := c.cc.Invoke(ctx, Server_NewClusterRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) UpdateClusterRegistration(ctx context.Context, in *UpdateClusterRegistrationRequest, opts ...grpc.CallOption) (*UpdateClusterRegistrationResponse, error) {
	out := new(UpdateClusterRegistrationResponse)
	err := c.cc.Invoke(ctx, Server_UpdateClusterRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) DeleteClusterRegistration(ctx context.Context, in *DeleteClusterRegistrationRequest, opts ...grpc.CallOption) (*DeleteClusterRegistrationResponse, error) {
	out := new(DeleteClusterRegistrationResponse)
	err := c.cc.Invoke(ctx, Server_DeleteClusterRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetClusters(ctx context.Context, in *GetClustersRequest, opts ...grpc.CallOption) (*GetClustersResponse, error) {
	out := new(GetClustersResponse)
	err := c.cc.Invoke(ctx, Server_GetClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetClusterApps(ctx context.Context, in *GetClusterAppsRequest, opts ...grpc.CallOption) (*GetClusterAppsResponse, error) {
	out := new(GetClusterAppsResponse)
	err := c.cc.Invoke(ctx, Server_GetClusterApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetClusterAppConfig(ctx context.Context, in *GetClusterAppConfigRequest, opts ...grpc.CallOption) (*GetClusterAppConfigResponse, error) {
	out := new(GetClusterAppConfigResponse)
	err := c.cc.Invoke(ctx, Server_GetClusterAppConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) AddAppStoreApp(ctx context.Context, in *AddAppStoreAppRequest, opts ...grpc.CallOption) (*AddAppStoreAppResponse, error) {
	out := new(AddAppStoreAppResponse)
	err := c.cc.Invoke(ctx, Server_AddAppStoreApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetAppStoreAppConfig(ctx context.Context, in *GetAppStoreAppConfigRequest, opts ...grpc.CallOption) (*GetAppStoreAppConfigResponse, error) {
	out := new(GetAppStoreAppConfigResponse)
	err := c.cc.Invoke(ctx, Server_GetAppStoreAppConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetAppStoreAppList(ctx context.Context, in *GetAppStoreAppListRequest, opts ...grpc.CallOption) (*GetAppStoreAppListResponse, error) {
	out := new(GetAppStoreAppListResponse)
	err := c.cc.Invoke(ctx, Server_GetAppStoreAppList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) UpdateAppStoreApp(ctx context.Context, in *UpdateAppStoreAppRequest, opts ...grpc.CallOption) (*UpdateAppStoreAppRsponse, error) {
	out := new(UpdateAppStoreAppRsponse)
	err := c.cc.Invoke(ctx, Server_UpdateAppStoreApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) DeleteAppStoreApp(ctx context.Context, in *DeleteAppStoreAppRequest, opts ...grpc.CallOption) (*DeleteAppStoreAppResponse, error) {
	out := new(DeleteAppStoreAppResponse)
	err := c.cc.Invoke(ctx, Server_DeleteAppStoreApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	NewClusterRegistration(context.Context, *NewClusterRegistrationRequest) (*NewClusterRegistrationResponse, error)
	UpdateClusterRegistration(context.Context, *UpdateClusterRegistrationRequest) (*UpdateClusterRegistrationResponse, error)
	DeleteClusterRegistration(context.Context, *DeleteClusterRegistrationRequest) (*DeleteClusterRegistrationResponse, error)
	GetClusters(context.Context, *GetClustersRequest) (*GetClustersResponse, error)
	GetClusterApps(context.Context, *GetClusterAppsRequest) (*GetClusterAppsResponse, error)
	GetClusterAppConfig(context.Context, *GetClusterAppConfigRequest) (*GetClusterAppConfigResponse, error)
	AddAppStoreApp(context.Context, *AddAppStoreAppRequest) (*AddAppStoreAppResponse, error)
	GetAppStoreAppConfig(context.Context, *GetAppStoreAppConfigRequest) (*GetAppStoreAppConfigResponse, error)
	GetAppStoreAppList(context.Context, *GetAppStoreAppListRequest) (*GetAppStoreAppListResponse, error)
	UpdateAppStoreApp(context.Context, *UpdateAppStoreAppRequest) (*UpdateAppStoreAppRsponse, error)
	DeleteAppStoreApp(context.Context, *DeleteAppStoreAppRequest) (*DeleteAppStoreAppResponse, error)
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) NewClusterRegistration(context.Context, *NewClusterRegistrationRequest) (*NewClusterRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewClusterRegistration not implemented")
}
func (UnimplementedServerServer) UpdateClusterRegistration(context.Context, *UpdateClusterRegistrationRequest) (*UpdateClusterRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterRegistration not implemented")
}
func (UnimplementedServerServer) DeleteClusterRegistration(context.Context, *DeleteClusterRegistrationRequest) (*DeleteClusterRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterRegistration not implemented")
}
func (UnimplementedServerServer) GetClusters(context.Context, *GetClustersRequest) (*GetClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusters not implemented")
}
func (UnimplementedServerServer) GetClusterApps(context.Context, *GetClusterAppsRequest) (*GetClusterAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterApps not implemented")
}
func (UnimplementedServerServer) GetClusterAppConfig(context.Context, *GetClusterAppConfigRequest) (*GetClusterAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterAppConfig not implemented")
}
func (UnimplementedServerServer) AddAppStoreApp(context.Context, *AddAppStoreAppRequest) (*AddAppStoreAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppStoreApp not implemented")
}
func (UnimplementedServerServer) GetAppStoreAppConfig(context.Context, *GetAppStoreAppConfigRequest) (*GetAppStoreAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppStoreAppConfig not implemented")
}
func (UnimplementedServerServer) GetAppStoreAppList(context.Context, *GetAppStoreAppListRequest) (*GetAppStoreAppListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppStoreAppList not implemented")
}
func (UnimplementedServerServer) UpdateAppStoreApp(context.Context, *UpdateAppStoreAppRequest) (*UpdateAppStoreAppRsponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppStoreApp not implemented")
}
func (UnimplementedServerServer) DeleteAppStoreApp(context.Context, *DeleteAppStoreAppRequest) (*DeleteAppStoreAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppStoreApp not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_NewClusterRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewClusterRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).NewClusterRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_NewClusterRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).NewClusterRegistration(ctx, req.(*NewClusterRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_UpdateClusterRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).UpdateClusterRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_UpdateClusterRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).UpdateClusterRegistration(ctx, req.(*UpdateClusterRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_DeleteClusterRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).DeleteClusterRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_DeleteClusterRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).DeleteClusterRegistration(ctx, req.(*DeleteClusterRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_GetClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetClusters(ctx, req.(*GetClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetClusterApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetClusterApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_GetClusterApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetClusterApps(ctx, req.(*GetClusterAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetClusterAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetClusterAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_GetClusterAppConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetClusterAppConfig(ctx, req.(*GetClusterAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_AddAppStoreApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppStoreAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).AddAppStoreApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_AddAppStoreApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).AddAppStoreApp(ctx, req.(*AddAppStoreAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetAppStoreAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppStoreAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetAppStoreAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_GetAppStoreAppConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetAppStoreAppConfig(ctx, req.(*GetAppStoreAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetAppStoreAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppStoreAppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetAppStoreAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_GetAppStoreAppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetAppStoreAppList(ctx, req.(*GetAppStoreAppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_UpdateAppStoreApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppStoreAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).UpdateAppStoreApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_UpdateAppStoreApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).UpdateAppStoreApp(ctx, req.(*UpdateAppStoreAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_DeleteAppStoreApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppStoreAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).DeleteAppStoreApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_DeleteAppStoreApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).DeleteAppStoreApp(ctx, req.(*DeleteAppStoreAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewClusterRegistration",
			Handler:    _Server_NewClusterRegistration_Handler,
		},
		{
			MethodName: "UpdateClusterRegistration",
			Handler:    _Server_UpdateClusterRegistration_Handler,
		},
		{
			MethodName: "DeleteClusterRegistration",
			Handler:    _Server_DeleteClusterRegistration_Handler,
		},
		{
			MethodName: "GetClusters",
			Handler:    _Server_GetClusters_Handler,
		},
		{
			MethodName: "GetClusterApps",
			Handler:    _Server_GetClusterApps_Handler,
		},
		{
			MethodName: "GetClusterAppConfig",
			Handler:    _Server_GetClusterAppConfig_Handler,
		},
		{
			MethodName: "AddAppStoreApp",
			Handler:    _Server_AddAppStoreApp_Handler,
		},
		{
			MethodName: "GetAppStoreAppConfig",
			Handler:    _Server_GetAppStoreAppConfig_Handler,
		},
		{
			MethodName: "GetAppStoreAppList",
			Handler:    _Server_GetAppStoreAppList_Handler,
		},
		{
			MethodName: "UpdateAppStoreApp",
			Handler:    _Server_UpdateAppStoreApp_Handler,
		},
		{
			MethodName: "DeleteAppStoreApp",
			Handler:    _Server_DeleteAppStoreApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
